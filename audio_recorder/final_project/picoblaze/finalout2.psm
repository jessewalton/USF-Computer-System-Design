
CONSTANT CONTROL, 00 
CONSTANT READY_SIG, 07

CONSTANT MEM_FULL, 02

CONSTANT COMMAND, 03
CONSTANT FILE, 04
CONSTANT VOLUME_OUTPUT, 05

CONSTANT LCD_OUTPUT, 06



 NAMEREG s0, MENU_STATE
 NAMEREG s1, FILE_STATE
 NAMEREG s2, TWO_STATE
 NAMEREG s3, MASTER_STATE
 
 NAMEREG s4, SEANS_CONSTANT
 
 NAMEREG s5, VOLUME
 
 NAMEREG s6, LCD_BUILD

 NAMEREG s7, READY_REG
 NAMEREG s8, COMMAND_REG
 NAMEREG s9, FILE_REG


 NAMEREG sA,CONTROLREG
 

LOAD VOLUME, 1C


 ENABLE INTERRUPT

; WELCOME MESSAGE
LOAD LCD_BUILD, A0
OUTPUT LCD_BUILD, LCD_OUTPUT
CALL WAIT_STATE
CALL INPUT_LOADER
 
;///////MAIN MENU//////////////////

;///////MAIN MENU CONTROL//
LOAD COMMAND_REG, FF
OUTPUT COMMAND_REG, COMMAND
CALL PUSH;********************************************************

MAIN_MENU_RS:
LOAD MENU_STATE, 00
CALL PUSH
MAIN_MENU:

LOAD MASTER_STATE, 00
CALL PUSH



CALL WAIT_STATE

CALL INPUT_LOADER





COMPARE CONTROLREG, 01
JUMP Z, UP_MAIN
COMPARE CONTROLREG, 02
JUMP Z, DOWN_MAIN
COMPARE CONTROLREG, 04
JUMP Z, BACK
COMPARE CONTROLREG, 08
JUMP Z, SELECT_MAIN

JUMP MAIN_MENU
;///////////////////////////MAIN UP/DOWN//////////////////

UP_MAIN:
COMPARE MENU_STATE, 04
JUMP NZ, UP_GOOD
JUMP MAIN_MENU
UP_GOOD:
ADD MENU_STATE, 01
CALL PUSH;********************************************************************
JUMP MAIN_MENU

DOWN_MAIN:
COMPARE MENU_STATE, 00
JUMP NZ, DOWN_GOOD
JUMP MAIN_MENU
DOWN_GOOD:
SUB MENU_STATE, 01
CALL PUSH;*********************************************************************
JUMP MAIN_MENU
;//////////////////////////////SELECT MAIN/////////////////

SELECT_MAIN:                 ;ROUTES TO MASTER SWITCH
COMPARE MENU_STATE, 00
JUMP Z, MASTER_PLAY
COMPARE MENU_STATE, 01
JUMP Z, MASTER_RECORD
COMPARE MENU_STATE, 02
JUMP Z, MASTER_DELETE
COMPARE MENU_STATE, 03
JUMP Z, MASTER_DEL_ALL
COMPARE MENU_STATE, 04
JUMP Z, MASTER_VOL






;///////MASTER SWITCH////////////////
MASTER_MENU:
LOAD MASTER_STATE, 00
CALL PUSH;***************************
JUMP MAIN_MENU_RS

MASTER_PLAY:
LOAD MASTER_STATE,01
CALL PUSH;***************************
JUMP FILE_MENU_RS

MASTER_RECORD:
LOAD MASTER_STATE,02
CALL PUSH;***************************
JUMP FILE_MENU_RS

MASTER_DELETE:
LOAD MASTER_STATE,03
CALL PUSH;***************************
JUMP FILE_MENU_RS

MASTER_PLAYING:
LOAD MASTER_STATE,04
CALL PUSH;***************************
JUMP TWO_OPTION_MENU_RS

MASTER_DELETING:
LOAD MASTER_STATE,05
CALL PUSH;***************************
JUMP TWO_OPTION_MENU_RS

MASTER_VOL:
LOAD MASTER_STATE,06
CALL PUSH;***************************
JUMP TWO_OPTION_MENU

MASTER_DEL_ALL:
LOAD MASTER_STATE,07
CALL PUSH;***************************
JUMP TWO_OPTION_MENU_RS

MASTER_PAUSED:
LOAD MASTER_STATE,08
CALL PUSH;***************************
JUMP ONE_OPTION_MENU

MASTER_RECORDING:
LOAD MASTER_STATE, 09
CALL PUSH;***************************
JUMP ONE_OPTION_MENU






;///////FILE_MENU CONTROL////////////////////////////////////
FILE_MENU_RS:
LOAD FILE_STATE, 00
CALL PUSH
FILE_MENU:

CALL WAIT_STATE

CALL INPUT_LOADER


COMPARE CONTROLREG, 01
JUMP Z, UP_FILE
COMPARE CONTROLREG, 02
JUMP Z, DOWN_FILE
COMPARE CONTROLREG, 04
JUMP Z, BACK
COMPARE CONTROLREG, 08
JUMP Z, SELECT_FILE

JUMP FILE_MENU






;////////////////////////FILE UP/DOWN///////////////////////////////////////

UP_FILE:
COMPARE FILE_STATE, 07
JUMP NZ, UP_FILE_GOOD ;if file number isnt max
JUMP FILE_MENU        ; otherwise return

UP_FILE_GOOD:
ADD FILE_STATE, 01
CALL PUSH;*******************************
JUMP FILE_MENU

DOWN_FILE:
COMPARE FILE_STATE, 00
JUMP NZ, DOWN_FILE_GOOD ;if file number isnt min
JUMP FILE_MENU          ; other wise return

DOWN_FILE_GOOD:
SUB FILE_STATE, 01
CALL PUSH;********************************
JUMP FILE_MENU





;//////////////////SELECT_FILE/////////////////////////
SELECT_FILE:
COMPARE MASTER_STATE, 01
JUMP Z, PLAY_MESSAGE
COMPARE MASTER_STATE, 02
JUMP Z, RECORD_MESSAGE
COMPARE MASTER_STATE, 03
JUMP Z, MASTER_DELETING



;//////////////////////SKIP////////////////////////////
SKIP:
COMPARE FILE_STATE, 07
JUMP Z,WRAP
ADD FILE_STATE,01
JUMP NOTWRAP
WRAP:
LOAD FILE_STATE, 00
NOTWRAP:
JUMP PLAY_MESSAGE


;//////////////////////PLAY///////////////////////////
PLAY_MESSAGE:
LOAD COMMAND_REG, 01
CALL SEND_COMMAND_PRD
JUMP MASTER_PLAYING


;/////////////////////RECORD//////////////////////////
RECORD_MESSAGE:
LOAD COMMAND_REG, 03
CALL SEND_COMMAND_PRD
JUMP MASTER_RECORDING


;/////////////////////DELETE//////////////////////////
DELETE_MESSAGE:
LOAD COMMAND_REG, 04
CALL SEND_COMMAND_PRD
JUMP BACK


;////////////////////TWO OPTION MENU///for pause/skip, yes/no ,vol up/vol down
TWO_OPTION_MENU_RS:
LOAD TWO_STATE,00
CALL PUSH
TWO_OPTION_MENU:

CALL WAIT_STATE
CALL INPUT_LOADER

COMPARE CONTROLREG, 01
JUMP Z, TWO_OPT_FLIP
COMPARE CONTROLREG, 02
JUMP Z, TWO_OPT_FLIP
COMPARE CONTROLREG, 04
JUMP Z, BACK
COMPARE CONTROLREG, 08
JUMP Z, SELECT_TWO_OPT

JUMP TWO_OPTION_MENU

;////////////////////////TWO OPT UP/DOWN///////////////
TWO_OPT_FLIP:

COMPARE TWO_STATE, 00
JUMP Z, TWO_STATE_UP
JUMP NZ, TWO_STATE_DOWN

TWO_STATE_UP:
LOAD TWO_STATE,01
CALL PUSH;*************************************
JUMP TWO_OPTION_MENU

TWO_STATE_DOWN:
LOAD TWO_STATE,00
CALL PUSH;************************************
JUMP TWO_OPTION_MENU





;//////////////////////TWO OPT SELECT//////////////////
SELECT_TWO_OPT:
COMPARE MASTER_STATE,04 ; playing
JUMP Z, PAUSE_SKIP
COMPARE MASTER_STATE,05 ; deleting
JUMP Z, YES_NO
COMPARE MASTER_STATE,06 ; volume
JUMP Z, UP_DOWN
COMPARE MASTER_STATE,07 ; deleting all
JUMP Z, YES_NO_ALL

PAUSE_SKIP:
COMPARE TWO_STATE,00
JUMP Z, PAUSE
COMPARE TWO_STATE,01
JUMP Z, SKIP

YES_NO:
COMPARE TWO_STATE,00
JUMP Z, BACK
COMPARE TWO_STATE,01
JUMP Z, DELETE_MESSAGE

YES_NO_ALL:
COMPARE TWO_STATE,00
JUMP Z, BACK
COMPARE TWO_STATE,01
JUMP Z, DELETE_ALL

UP_DOWN:
COMPARE TWO_STATE,00
JUMP Z, VOL_UP
COMPARE TWO_STATE,01
JUMP Z, VOL_DOWN

;//////////////////////VOL UP/DOWN////////////////////////////
VOL_UP:
COMPARE VOLUME, 1F
JUMP NZ, UP_VOL
JUMP TWO_OPTION_MENU


VOL_DOWN:
COMPARE VOLUME,00
JUMP NZ, DOWN_VOL
JUMP TWO_OPTION_MENU

UP_VOL:
ADD VOLUME,01
OUTPUT VOLUME, VOLUME_OUTPUT
JUMP TWO_OPTION_MENU

DOWN_VOL:
SUB VOLUME,01
OUTPUT VOLUME, VOLUME_OUTPUT
JUMP TWO_OPTION_MENU
;//////////////////////////////////////////////////




;/////////////////////PAUSE///////////////////////////////////////
PAUSE:
LOAD COMMAND_REG, 02
OUTPUT COMMAND_REG, COMMAND
JUMP MASTER_PAUSED

;/////////////////////RESUME_MESSAGE/////////////////////////////////
RESUME_MESSAGE:
LOAD COMMAND_REG, 01
OUTPUT COMMAND_REG, COMMAND
JUMP MASTER_PLAYING

;/////////////////////DELETE_ALL////////////////////////////
DELETE_ALL:
LOAD COMMAND_REG, 05
CALL SEND_COMMAND_PRD
JUMP BACK

;////////////////////////ONE_OPTION/////////////////////////
ONE_OPTION_MENU:
CALL WAIT_STATE
CALL INPUT_LOADER
COMPARE CONTROLREG,08
JUMP Z, ONE_OPT_SEL
COMPARE CONTROLREG, 04
JUMP Z, BACK
JUMP ONE_OPTION_MENU

;////////////////////ONE_OPT_SEL////////////////////////
ONE_OPT_SEL:
COMPARE MASTER_STATE,08
JUMP Z, RESUME_MESSAGE ;RESUME!!!
COMPARE MASTER_STATE,09
JUMP Z, STOP
JUMP ONE_OPTION_MENU

;/////////////////STOP!!!!!//////////////
STOP:
LOAD SEANS_CONSTANT,00
OUTPUT SEANS_CONSTANT, COMMAND
JUMP BACK






;/////////////////////////BACK!!!!///////////////
BACK:              ;ONE BACK TO RULE THEM ALL!!!!
JUMP MASTER_MENU





;//////////////////SEND_COMMAND  P/R/D   ///////////////////////////////////
SEND_COMMAND_PRD:
OUTPUT FILE_STATE,FILE
LOAD SEANS_CONSTANT,00
OUTPUT SEANS_CONSTANT, COMMAND
READY_WAIT:
INPUT READY_REG,READY_SIG
COMPARE READY_REG, 01
JUMP NZ, READY_WAIT
OUTPUT COMMAND_REG, COMMAND






;//////////WAIT STATE///////////////////////////
WAIT_STATE:
INPUT CONTROLREG, CONTROL
COMPARE CONTROLREG, 00          ;wait state
JUMP NZ, WAIT_STATE
RETURN





;////////INPUT LOADER/////////////
INPUT_LOADER:
INPUT CONTROLREG, CONTROL ;ADD USB SHIT HERE!!!!!
COMPARE CONTROLREG, 00
JUMP Z, INPUT_LOADER
RETURN


;//////////LCD_PUSH//////////////
PUSH:
LOAD LCD_BUILD, MASTER_STATE
SL0 LCD_BUILD
SL0 LCD_BUILD
SL0 LCD_BUILD
SL0 LCD_BUILD
COMPARE MASTER_STATE,00
JUMP Z, MAIN_PUSH
COMPARE MASTER_STATE,01
JUMP Z, FILE_PUSH
COMPARE MASTER_STATE,02
JUMP Z, FILE_PUSH
COMPARE MASTER_STATE,03
JUMP Z, FILE_PUSH
COMPARE MASTER_STATE,04
JUMP Z, TWO_PUSH
COMPARE MASTER_STATE,05
JUMP Z, TWO_PUSH
COMPARE MASTER_STATE,06
JUMP Z, TWO_PUSH
COMPARE MASTER_STATE,07
JUMP Z, TWO_PUSH
COMPARE MASTER_STATE,08
JUMP Z, ONE_PUSH
COMPARE MASTER_STATE,09
JUMP Z, ONE_PUSH

MAIN_PUSH:
ADD LCD_BUILD, MENU_STATE
JUMP PUSH_PUSH

FILE_PUSH:
ADD LCD_BUILD, FILE_STATE
JUMP PUSH_PUSH

TWO_PUSH:
ADD LCD_BUILD, TWO_STATE
JUMP PUSH_PUSH

ONE_PUSH:
ADD LCD_BUILD, 00
JUMP PUSH_PUSH

PUSH_PUSH:

OUTPUT LCD_BUILD, LCD_OUTPUT


RETURN

JUMP MAIN_MENU_RS






ISR:
LOAD LCD_BUILD, B0
OUTPUT LCD_BUILD, LCD_OUTPUT
LOAD COMMAND_REG, 00
OUTPUT COMMAND_REG, COMMAND
CALL WAIT_STATE
CALL INPUT_LOADER
RETURNI ENABLE

ADDRESS 3FF
JUMP ISR